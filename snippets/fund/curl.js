const { execSync } = require('child_process')

function handleBrowserRedirects(html, id, ...redirectedIds) {
  const ex = new RegExp('<script type="text/javascript">\\s+location.href = "http://fund.eastmoney.com/(\\d+).html"; </script>')
  const x = html.match(ex)
  if (x && x[1]) {
    redirectedIds.push(id)
    return fetchFundInfo(x[1], ...redirectedIds)
  } else {
    return []
  }
}

function fetchFundInfo(id, ...redirectedIds) {
  const href = `http://fund.eastmoney.com/${id}.html`
  let html = ''
  try {
    html = execSync(`curl --silent -L --max-redirs 3 ${href}`, { encoding: 'utf8' })
    // console.log(111, !!html.match(/\<\!\-\- 档案 start \-\->([\s\S]+)\<\!\-\- 档案 end \-\->/))
    html = html.match(/\<\!-- 档案 start \-\->([\s\S]+)\<\!-- 档案 end \-\->/)[1].replace(/\<\/?[a-z]+[^>]*\>/g, ' ')
    return [html, href, id, ...redirectedIds]
  } catch (e) {
    return handleBrowserRedirects(html, id, ...redirectedIds)
  }
}

function unique(arr) {
  return Object.keys(arr.reduce((r, n) => {
    r[n] = 1
    return r
  }, {}))
}

function getCodes(container) {
  const codes = []
  container.querySelectorAll('tbody').forEach(tbody => {
    tbody.querySelectorAll('tr').forEach(tr => {
      codes.push(tr.querySelector('td').innerText)
    })
  })
  console.log(JSON.stringify(codes.filter(Boolean)))
}

// const list = ['502048']
// JSON.stringify([].map.call($0.querySelectorAll('tr'), (tr) => tr.querySelector('td').innerText))
const list = [
  // 上证50
  "110003","501050","004746","502048","510800","007379","006221","008240","510600","502040","008057",
  "510050","001549","001237","510710","510850","007380","510680","006220","008241","008056","510860",
  "001051","001548","399001","510100","005733","005737","005881","005880","502020","006395",

  // 沪深300
  "050002","510300","163407","481009","510330","310398","660008","510310","000313","159925","002987","162213","160615","200002","000312","163408","006020","005658","510350","007230","501045","202016","515130","515390","673100","512270","008592","008593","007605","004191","159933","004190","005639","166802","010737","510380","007538","002671","009059","007404","003548","165806","008239","003957","005870","512010","006912","201002","008776","005152","008777","007275","510370","008292","007276","000051","006699","010556","000950","000613","000961",
  "160706","110020","020011","519671","270010","519714","159919","001015","001344","161211","510360","165309","004789","450008","003876","000368","512530","007883","000512","510390","160724","320014","007882","010854","165310","002310","161718","007804","270020","163821","000154","007800","006939","005640","673101","005530","006937","008238","007045","005103","515930","003579","005867","003475","006600","004513","515360","005248","004512","007096","007143","001884","008390","007039","008927","007144","009208","010872","010909","519715","010352",
  "000311","100038","519300","005918","161721","202015","310318","000176","460300","512070","110030","002385","001016","501043","007339","515330","515300","010736","519116","004788","006021","161811","165515","519301","160807","007044","004342","003885","515310","003884","006131","740101","005102","167601","515350","007606","002670","166007","515380","003958","005113","003015","515660","008184","007539","005114","009060","008291","010855","002063","000656","008926","005137","007448","008391","165810","006698","002315","010908","010873",

  // 中证500
  "510500","510510","003318","162216","005919","002900","001557","001556","004348","001214","002316","660011","001241","164809","090020","001455","006130","510590","159935","161021","001351","005994","003016","006215","004945","008001","006594","510440","007223","009608","005607","006048","007943","008779","009613","004791","008112","009300","006729","010992","515530","007413","009614","002510","010993","007386","009337","008124","010253","000962","010067",
  "000478","161017","162711","159922","003986","002903","007028","159968","002906","512330","008396","512510","501037","590007","159982","510530","510550","510560","006382","162713","005633","159820","007932","162107","515590","005795","006938","515550","159999","003578","008778","007794","006611","005608","007594","008259","007995","006440","006441","009609","006657","002311","006730","005966","010157","006784","009336","010154","010066","011205",
  "160119","001052","165511","512500","510580","004347","512260","160616","501036","005062","160120","007029","006129","070039","519034","006682","002907","007795","502000","008397","004192","004193","006087","006593","007994","007593","515510","159932","006214","515190","510570","008258","008113","007885","002076","004790","003761","003760","007089","007886","006656","005965","009726","009727","009004","006783","010158","010153","000008","010355",

  // 创业板
  "161022","159915","160420","002656","159952","003765","160424","160223","007465","160325","159958","161838","009046","009557","008072","006248","005391","004870","009798","009791","005287","009013","006733","009012","160727","164826","003070","010356","010889","011316","011317","110026","159949","001592","001879","004744","007464","003766","050021","160926","163209","159957","159955","161914","159991","159956","006249","160143","162720","005390","168207","159964","159971","159810","009981","005873","009513","009514","010785","010786","010750","001593","161613","160637","006928","159948","160422","000586","004343","161040","166027","161663","159977","003069","159908","159808","009047","159814","160529","007664","007665","005288","005874","160425","161915","159821","009982","010183","010505","010749","159836",

  // 红利
  "100032","001076","515180","501029","288002","515080","560002","530017","481006","501089","006351","512890","080005","540009","900089","519115","008115","008682","008929","009052","008114","006260","006724","730002","008163","003025","005562","006352","007467","004814","008091","008164","005569","501072","005404","000490","000824","257041","005570","000592","007570","008878","011386","011648","510880","070032","481012","202009","007801","000279","003396","001188","510890","210002","005521","005052","007466","009051","257040","512530","515100","515890","531017","007671","690009","005561","007605","515450","100030","007606","519971","000908","000825","000256","007829","005545","008092","005519","009102","009263","006659","000489","009103","009999","005834","010841","011647","090010","002011","161907","159905","100033","100029","005583","900099","005051","501059","001951","360005","006259","001255","008928","515300","610005","000907","007751","900011","162212","009108","001574","515570","005125","006658","007760","002463","007672","007828","005618","001537","202010","004815","009193","002436","005270","005619","009439","005833","002012","970015","000102",

  // 基本面
  "160716","159916","050021","519117","162907","159908","007307","530015","512750","160725","166402","005998","007306","006226","070023","159910","008515","006363","010854","010855","006225",

  // 央视财经50
  "165312","004410","217027","006743","159965","006744",

  // 上证综指
  "470007","510760","100053","000164","510210",

  // 中证100
  "519100","213010","202211","161039","515200","162307","162509","006486","006487","005313","006165","006166","516300","010351","240014","320010","162413","410008","004194","159923","007983","007136","007135","005691","007405","159845","009479","010224","163808","512100","164508","512910","003646","004195","007984","003647","515670","005314","007580","240015","009480",

  // 中证800
  "160625","160516","515800","160806","010673","515620","007857","516870","160628","165519","515630","001588","515830","515610","010674","159887","165520","165521","515810","001589","007856","515820","516110",

  // 中证1000
  "512100","004194","006486","005313","006166","162413","003646","003647","005314","159845","161039","004195","006487","006165","516300",
  
  // 消费
  "110022","159928","206007","519915","000974","519002","519714","006408","515650","001726","501090","005621","090016","006671","001928","008975","610007","010326","000845","008166","005889","100055","006604","003715","009329","009179","009180","003191","005674","002967","004549","009852","010104","003513","006675","008841","620006","010887","006713","005676","007261","009778","009564","006712","007965","007277","000157","006692","007308","005175","006693","010221","011078","007966","010586","516600","002599","160144","010703","010022","002606","010176","011309","011020","010801","002663","000056","009734","011432","011418","010332","011419","000083","009265","160127","398061","200006","001069","270041","001133","310388","501089","006308","510150","161818","519150","233008","005682","005526","519125","370023","008928","004995","006309","870017","008934","006252","004934","006644","008929","001193","159986","010555","003190","009958","010327","010585","009116","007381","011282","008840","005335","010772","004189","005143","000593","008353","000551","010815","009117","004805","009619","010888","010771","010245","010105","009779","007288","007287","009565","011153","009975","002605","009527","009620","011431","010617","010618","010177","010422","011475","010998","011567","011879","000248","001044","002697","660012","510630","240001","004505","001927","005620","519193","512600","162415","005888","160624","217017","159936","540009","481013","118002","010554","519678","006253","002977","008976","010409","008935","006796","161213","004407","008234","006605","008167","006676","006310","010220","004456","008519","005142","005970","009507","515920","006786","002423","009959","009508","006787","350008","008520","007382","519176","161215","008354","007281","010151","006235","002598","010152","011283","010421","002662","002621","010704","006882","009733","006883","519715","011154","010802","010331","000057","000102",

  // 医药
  "161726","006113","163118","004075","000974","159929","006002","512290","000878","005112","008284","002978","010110","010387","006756","009805","007077","010111","003284","008552","010585","010366","010090","008619","009508","006274","010405","010091","011383","009502","011308","008155","470006","000452","160219","001550","000879","159938","161035","006218","006003","510660","165519","160635","005304","515950","000376","007076","512120","006981","008551","009898","010592","009507","159839","516080","008618","005433","011041","011040","011598","011326","010710","001230","001180","000960","001551","240020","001984","005303","000059","004905","001344","006757","009162","512610","008107","007883","161126","000373","006569","515960","007005","010388","008285","010654","010655","512010","010593","010586","010031","010709","009503","008154",

  // 养老
  "001171","003161","000684","002982","006880","006321","006620","010266","006297","006763","006307","007059","006894","006886","007159","008639","009184","007238","007247","007297","007221","007638","007661","006862","006303","007407","007780","007652","006860","007231","007748","007705","007668","010643","009340","000639","007071","008609","009143","009161","006895","007660","010193","007779","008631","007688","010323","009385","010958","011684","011745","000968","001955","003295","006580","006289","519050","006991","002166","003476","007643","000508","007401","006891","006291","006575","006861","008697","007070","006322","006245","010277","006876","000507","007651","007250","007241","007649","009174","001485","007650","006859","008617","006918","007298","007274","007747","007273","009460","002103","010735","002061","008625","000854","007242","007232","006873","009626","009436","007695","011233","011594","420009","168001","000121","006290","000367","006296","006298","001358","006295","006294","006306","007090","007249","010267","006581","006292","006305","007271","007060","006621","006622","009003","007188","002547","009335","009183","007255","008553","002339","008621","009572","007160","007662","009355","007272","009573","007402","007239","009884","007310","006623","006872","010281","008753","007673","008930","009442","007694","010320","011557",

  // 银行
  "519697","001595","161723","161121","512700","160418","240019","168205","009860","512730","008298","006810","006578","003083","515293","003082","010509","160631","660001","000127","512800","660015","512070","501025","006697","007882","007153","008299","006809","008042","000950","007670","003084","009222","160625","161029","001594","160517","004598","004597","512820","007154","515020","515280","515290","006579","010365","003081","008043","009221","159887",

  // 证券
  "163113","161027","001553","007531","501016","160419","160516","900003","169103","008591","168102","900079","515010","501095","515630","900010","002938","970010","007993","003659","005571","900030","005572","900100","006537","008259","900009","001177","006626","004913","004957","004918","900152","900039","005321","970007","900022","004914","970009","004955","007023","009729","970006","010171","009567","008863","011449","900017","011801","900077","160625","161720","512880","000834","001552","900099","006098","512070","502053","900090","121009","513090","515560","900011","006154","003316","900052","008590","501027","515190","008258","009640","006627","900029","005226","168108","010892","003406","004917","009641","006534","003981","159842","004954","516200","004956","011448","006468","007269","007268","970008","010893","009799","007212","008996","005363","970018","980003","900057","011802","004070","512000","160633","004069","502010","501048","512900","159993","501047","900089","161629","512570","000329","900008","510200","515850","007992","515570","168401","900019","900078","167003","004807","159841","003980","003317","002601","001175","001176","003929","159848","009728","159821","900059","004808","003179","010170","005309","005611","003930","970019","008995","005362","007024","009595","516980","008862","010946","900027","900087",

  // 金融
  "000251","001469","512070","165521","159940","007882","005663","159931","510650","001393","510690","006652","010696","003315","001516","008042","006633","006634","006645","008043","007962","006613","006869","007495","008658","008156","008680","008005","011166","009176","010467","008157","010497","011944","001054","002979","005662","004871","008283","004702","159933","168701","005576","501105","090023","007372","005999","091023","159851","010312","000950","007371","007366","006415","007180","007963","006932","011124","007367","008679","009175","009786","006935","010407","006933","009088","008653","020021","161211","160814","510230","001539","005938","001392","005937","512640","006579","003233","006578","003232","168702","519208","002659","009625","519209","007492","006934","006134","008006","007433","008879","007859","009087","009262","010406","008652","007860","009721","007181","009722",

  // 地产
  "000251","161721","002979","001556","070031","159940","004642","159933","515060","005576","001393","006652","003232","006816","011124","160628","001469","001557","512200","160814","004643","000180","001392","005937","512640","008088","010696","006283","010312","160218","000179","206011","161211","004871","001539","005938","159931","510650","008089","003233","005999","006817","010989",

  // 军工
  "161024","164402","512660","000596","501019","003017","160643","512810","011113","011592","001475","005609","005693","502003","002199","002983","512680","010364","001524","163115","004698","004224","002251","512710","161628","512560","008960","011148",

  // 环保
  "100056","001064","163114","001856","160634","004640","000158","007163","000696","001166","001975","164304","512580","002259","007164","159861","001616","000977","398051","000409","002984","004925","010419",

  // 白酒
  "161725",

].filter(Boolean)

function wait() {
  return new Promise(rs => {
    setTimeout(rs, 500)
  })
}

function match(s, pat) {
  const res = s.match(pat)
  return res && res[1] || '-'
}

const failedList = ["100030" ,"100033" ,"160120" ,"161021" ,"161215" ,"161663" ,"162713" ,"163408" ,"201002" ,"202010" ,"202016" ,"240015" ,"257041" ,"270020" ,"515293" ,"519301" ,"519715" ,"000154" ,"002012" ,"000102" ,"000164" ,"000157" ,"002606" ,"000158"]

;(async function main() {
  let headers = null
  for (let id of unique(failedList)) {
    const [contents, href, ...ids] = fetchFundInfo(id)
    id = ids.join(',')
    if (!contents) {
      console.error(`${id} failed`)
    } else {
      const o = { id }
      ;['近1月', '近3月', '近6月', '近1年', '近3年', '成立来'].forEach(pat => {
        o[pat] = match(contents, new RegExp(`${pat}：[\\s]*([-\\d\\.]+%)`))
      })
      o['基金规模'] = match(contents, /基金规模[\s]*：([^（]+)/)
      o['成 立 日'] = match(contents, /成 立 日[\s]*：([\S]+)/)
      o['跟踪标的'] = match(contents, /跟踪标的：[\s]*([\S]+)/)
      o['跟踪误差'] = match(contents, /跟踪误差：[\s]*([\S]+)/)
      // \r 确保复制粘贴到 numbers 中时是链接而不是文本
      o['地址'] = `${href}\r`
      // o['地址'] = href
      if (!headers) {
        headers = Object.keys(o)
        console.log(headers.join('\t'))
      }
      console.log(headers.map(k => o[k]).join('\t'))
      await wait()
    }
  }
})()
